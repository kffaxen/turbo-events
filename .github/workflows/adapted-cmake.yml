name: CMake

on:
  # push:
    # branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    continue-on-error: false
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Install tools
      # Install the tools we need
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build clang-tidy-12 ccache libgflags-dev graphviz doxygen libxerces-c-dev librdkafka-dev python3.8-distutils
        sudo snap install cmake --classic
        cd ..
        wget https://github.com/pybind/pybind11/archive/refs/tags/v2.6.2.zip
        unzip v2.6.2.zip
        cd pybind11-2.6.2
        cmake -B build -G Ninja -DPYBIND11_TEST=OFF -DCMAKE_INSTALL_PREFIX=`pwd`/../installed
        cmake --build build --target install
        cd ../turbo-events

    - name: Check code formatting
      run: |
        out=$(git clang-format-12 --binary=clang-format-12 --diff HEAD^)
        [ "$out" = "no modified files to format" ] && exit 0
        [ "$out" = "clang-format did not modify any files" ] && exit 0
        echo "Badly formatted files:"
        git clang-format-12 --binary=clang-format-12 HEAD^
        exit 1

    - name: Configure CMake
      run: CMAKE_PREFIX_PATH=`pwd`/../installed cmake -B ${{github.workspace}}/build -G "Ninja Multi-Config"

    # We can build the check target immediately, but building the default
    # target first allows us to see if the CI fails because of the build
    # or the test.
    - name: Build Debug Build
      run: |
        cmake --build ${{github.workspace}}/build --config Debug

    - name: Test Debug Build
      run: |
        # Sanitizers/Valgrind needs Python to use the regular malloc.
        export PYTHONMALLOC=malloc
        cmake --build ${{github.workspace}}/build --config Debug --target check

    # Address sanitizer has sanity checks that interferes with CodeQL,
    # only run CodeQL on release build.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: cpp

    - name: Build Release Build
      run: |
        cmake --build ${{github.workspace}}/build --config Release

    - name: Test Release Build
      run: |
        cmake --build ${{github.workspace}}/build --config Release --target check

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
